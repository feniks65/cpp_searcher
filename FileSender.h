#ifndef FILESENDER_H
#define FILESENDER_H

#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>

class FileSender {
	const int udpPort = 5300;
	const char *broadIpAddress = "127.0.0.1";

	const int fileBeginMarker[256] = {0x14,  0xd7,  0xfc,  0xe2,  0xe4,  0x3e,  0xa8,  0xbc,  0xc0,  0xad,  0x50,  0x90,  0x63,  0x83,  0x7f,  0xa9,  0x58,  0x3a,  0xcb,  0x26,  0x41,  0x79,  0x7b,  0x93,  0x0b,  0x24,  0x7e,  0xca,  0x5c,  0x6d,  0x72,  0xb1,  0xf3,  0xce,  0xb5,  0x4e,  0x35,  0x66,  0x42,  0x83,  0x58,  0xcb,  0xe1,  0x58,  0xe7,  0x08,  0x39,  0x95,  0x1e,  0xb7,  0xb3,  0x2b,  0x4b,  0xde,  0x92,  0x6d,  0x1e,  0x5b,  0x63,  0x06,  0x28,  0x6d,  0xb9,  0x9e,  0x92,  0xbb,  0xee,  0x88,  0x4c,  0xfd,  0xbd,  0x31,  0x56,  0xd3,  0x64,  0xbf,  0x92,  0x48,  0x15,  0xc0,  0x89,  0xd2,  0x16,  0x7b,  0xcb,  0xc1,  0xb3,  0xd3,  0x3a,  0xa7,  0x78,  0x68,  0x70,  0x77,  0x69,  0xcb,  0x52,  0xca,  0xd6,  0x96,  0xc3,  0x4a,  0x9c,  0x4f,  0x80,  0xa2,  0x95,  0x4d,  0xd7,  0x25,  0x95,  0xf8,  0x69,  0x25,  0x1d,  0xf4,  0xce,  0x07,  0xdb,  0x89,  0x48,  0x23,  0xb4,  0x09,  0xd5,  0x67,  0x05,  0x45,  0xeb,  0xa8,  0x63,  0x19,  0xc0,  0x05,  0xf7,  0xf6,  0x7e,  0x97,  0x23,  0x47,  0x74,  0x93,  0x38,  0xee,  0x20,  0xa7,  0x5b,  0xd3,  0xf8,  0x30,  0x27,  0x2f,  0x29,  0xb0,  0x87,  0xe3,  0x24,  0x89,  0x07,  0xe6,  0x73,  0x5c,  0x82,  0x4b,  0x7d,  0xb4,  0x93,  0x29,  0x91,  0xd7,  0x4b,  0x1e,  0x87,  0x7d,  0x66,  0xc4,  0x7c,  0xf4,  0x8b,  0x56,  0x52,  0xa4,  0x6f,  0xed,  0x10,  0x93,  0xf6,  0x8a,  0x39,  0x66,  0x67,  0xb2,  0xe2,  0xf0,  0xd1,  0x12,  0x51,  0x65,  0x1a,  0x93,  0xf8,  0x39,  0x6c,  0xd8,  0xef,  0x71,  0x1f,  0x39,  0x72,  0xa2,  0x80,  0x58,  0x10,  0x56,  0xea,  0x80,  0x3f,  0xa8,  0x61,  0x65,  0x2d,  0x8c,  0x6d,  0x08,  0x3d,  0x3b,  0x5e,  0xf7,  0x39,  0x4a,  0x91,  0xaf,  0x0c,  0x0e,  0x8b,  0xce,  0xf3,  0x1c,  0x6b,  0xa3,  0xc9,  0xe8,  0x48,  0xe9,  0x1e,  0x7d,  0xf7,  0x42,  0x70,  0x99,  0xcb,  0x22,  0x7a,  0x6c,  0x9c, 0xaa};
	const int fileBeginMarkerLength = 255;

	void sendViaFtp(const File& file) {

	}

	void sendViaSmtp(const File& file) {

	}

	void sendBuffer(const char* sendBuffer, long bufferLength) {
		int sockfd;
		sockfd = socket(AF_INET,SOCK_DGRAM,0);
		struct sockaddr_in serv;

		serv.sin_family = AF_INET;
		serv.sin_port = htons(udpPort);
		serv.sin_addr.s_addr = inet_addr(broadIpAddress);

		socklen_t m = sizeof(serv);
		sendto(sockfd, sendBuffer, (size_t)bufferLength, 0, (struct sockaddr *)&serv, m);
	}

	void sendViaLANUdpBroadcast(const File& file) {
		sendBuffer((const char*)fileBeginMarker, (long)fileBeginMarkerLength);
		sendBuffer(file.getEncodedContent.c_str(), file.getEncodedContent.getFileSize());
	}
public:
	FileSender(const File& file) {
		//TODO sending files in several different ways SMTP, TOR, FTP
		sendViaLANUdpBroadcast(file);
	}
};

#endif
